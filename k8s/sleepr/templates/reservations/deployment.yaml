apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: reservations
    environment: { { .Values.environment } }
  name: reservations
  namespace: { { .Release.Namespace } }
spec:
  replicas: { { .Values.replicas.reservations } }
  selector:
    matchLabels:
      app: reservations
  template:
    metadata:
      labels:
        app: reservations
        environment: { { .Values.environment } }
    spec:
      containers:
        - image: "{{ .Values.aws.accountId }}.dkr.ecr.{{ .Values.aws.region }}.amazonaws.com/{{ .Values.images.reservations }}"
          name: reservations
          env:
            - name: MONGODB_URI
              valueFrom:
                secretKeyRef:
                  name: mongodb
                  key: connectionString
            - name: PORT
              value: "{{ .Values.ports.reservations }}"
            - name: AUTH_HOST
              value: auth-tcp
            - name: AUTH_PORT
              value: "{{ .Values.ports.auth.tcp }}"
            - name: PAYMENTS_HOST
              value: payments
            - name: PAYMENTS_PORT
              value: "{{ .Values.ports.payments }}"
          ports:
            - containerPort: { { .Values.ports.reservations } }
              name: http
          resources:
            requests:
              cpu: { { .Values.resources.requests.cpu } }
              memory: { { .Values.resources.requests.memory } }
            limits:
              cpu: { { .Values.resources.limits.cpu } }
              memory: { { .Values.resources.limits.memory } }
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 20
